function int printarray (double[] a) {
  int i; i := 0;
  while i < length(a) do {
    output a[i];
    i := i + 1;
  };
  return 0;
};

#source:http://www.java-uni.de/index.php?Seite=86
function int partition(double[] x; int links; int rechts) {
  double pivot; int i; int j; double help;
  pivot := x[rechts];
  i := links;
  j := rechts-1;
  while i <= j do {
    if x[i] > pivot then {
      help := x[i];
      x[i] := x[j];
      x[j] := help;
      j := j - 1;
    } else i := i + 1;
  };
  help := x[i];
  x[i] := x[rechts];
  x[rechts] := help;

  return i;
};
function double[] qSort(double[] x; int links; int rechts) {
  if links < rechts then {
    int i; i := partition(x; links; rechts);
    x := qSort(x; links; i-1);
    x := qSort(x; i+1; rechts);
  };
  return x;
};
function double[] quicksort(double[] x) {
    return qSort(x; 0; length(x)-1);
};

int mock;
double[10] a;
a[0] := 8.8;
a[1] := 6.6;
a[2] := 2.2;
a[3] := 5.5;
a[4] := 3.3;
a[5] := 9.9;
a[6] := 4.4;
a[7] := 10.0;
a[8] := 1.1;
a[9] := 7.7;
a := quicksort(a);
mock := printarray(a);
