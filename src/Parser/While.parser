{
{-|
  Module      : Parser.While
  Description : A generated bottom-up LR parser for the WHILE language.
  Copyright   : 2014, Jonas Cleve
                2015, Tay Phuong Ho
                2016, Philip Schmiel
  License     : GPL-3
-}
module Parser.While (parse) where

import Interface.Token
import qualified Interface.AST as AST

}

%name       parse
%tokentype  { PosToken }

%tokens

id          { PosToken _ (Id $$) }
integer     { PosToken _ (DInt $$) }  -- $ modified
real        { PosToken _ (DDouble $$) }     -- $ added
bool        { PosToken _ (DBool $$) }
character   { PosToken _ (DChar $$) }
and         { PosToken _ (LogOp And) }
or          { PosToken _ (LogOp Or) }
not         { PosToken _  Not }
relop       { PosToken _ (RelOp $$) }
toClass     { PosToken _ ToClass}
'+'         { PosToken _ (MathOp Plus) }
'-'         { PosToken _ (MathOp Minus) }
'*'         { PosToken _ (MathOp Times) }
'/'         { PosToken _ (MathOp DivBy) }
mod         { PosToken _ (MathOp Mod) }
':='        { PosToken _  Assign }
':'         { PosToken _ NameSpace}
'.'         { PosToken _ Dot}
eof         { PosToken _  Eof }
read        { PosToken _  Read }
output      { PosToken _  Output }
return      { PosToken _  Return }       -- $ added
if          { PosToken _  If }
then        { PosToken _  Then }
else        { PosToken _  Else }
while       { PosToken _  While }
do          { PosToken _  Do }
int         { PosToken _ (Type TInt) }    -- $ added
double      { PosToken _ (Type TDouble) } -- $ added
char        { PosToken _ (Type TChar) }
ref         { PosToken _ (Type TRef)}
func        { PosToken _  Function }     -- $ added
labelspec   { PosToken _ LabelSpec}
'('         { PosToken _ (Token '(') }
')'         { PosToken _ (Token ')') }
'{'         { PosToken _ (Token '{') }
'}'         { PosToken _ (Token '}') }
'['         { PosToken _ (Token '[') }   -- $ added
']'         { PosToken _ (Token ']') }   -- $ added
';'         { PosToken _ (Token ';') }

%grammar

Program :: { AST.AST }
        : Cmds                          { $1 }

Cmds    :: { AST.Command }
        : Cmds ';' Cmd                  { AST.Sequence $1 $3 }
        | Cmd                           { $1 }

Cmd     :: { AST.Command }
        : '{' Cmds '}'                  { AST.Environment $2 }
        | if Bexpr then Cmd             { AST.IfThen $2 $4 }
        | if Bexpr then Cmd else Cmd    { AST.IfThenElse $2 $4 $6 }
        | while Bexpr do Cmd            { AST.While $2 $4 }
        | Instr                         { $1 }

Instr    :: { AST.Command }
        : Addr ':=' Expr                { AST.Assign $1 $3 }
        | Type '[' Expr ']' Addr        { AST.ArrayAlloc $1 $3 $5 }
        | output Expr                   { AST.Output $2 }
        | read Addr                     { AST.Read $2 }
        | return Expr                   { AST.Return $2 }
        | Decl                          { $1 }
        |                               { AST.Skip }

Expr    :: { AST.Expression }
        : Expr '+' Term              { AST.Calculation Plus $1 $3 }
        | Expr '-' Term              { AST.Calculation Minus $1 $3
        | Term                       { $1 }

Term    :: { AST.Expression }
        : Term  '*' Factor           { AST.Calculation Times $1 $3 }
        | Term  '/' Factor           { AST.Calculation DivBy $1 $3 }
        | Term mod Factor            { AST.Calculation Mod $1 $3 }
        | Factor                     { $1 }

Factor  :: { AST.Expression }
        : toClass id                 { AST.ToClass $2 }
        | '-' Factor                 { AST.Negate $2 }
        | Param                      { $1 }

Addr    :: { AST.Address }
        : id '.' Elements            { AST.Structure ( AST.Identifier $1 ) $3 }
        | Element                    { $1}

Elements :: { AST.Address }
         : Elements '.' Element      { AST.Structure $1 $3 }
         | Element                   { $1 }

Element  :: { AST.Address }
         : Element '[' Expr ']'      { AST.FromArray $1 $3 } 
         | Element '(' Params ')'    { AST.FunctionCall $1 $3 }
         | Element '(' ')'           { AST.FunctionCall $1 AST.Void }
         | id ':' id                 { AST.Label $1 $3 }
         | ':' id                    { AST.Label "default" $2 }
         | id                        { AST.Identifier $1 }

Params   :: { AST.Expression }
         : Params ';' Expr          { AST.Parameters $1 $ AST.Parameter $3 }
         | Expr                     { AST.Parameter $1 }

Param    :: { AST.Expression }
         : integer                   { AST.Integer $1 }
         | real                      { AST.Double $1 }
         | character                 { AST.Character $1 }
         | id ':' id                 { AST.Reference $1 $3 }
         | ':' id                    { AST.Reference "default" $2 }
         | Addr                      { AST.Variable $1 }
         | '(' Expr ')'              { $2 }

Decl     :: { AST.Command }
         : func Type id '(' Decls ')' Cmd { AST.Function $2 $3 $5 $7 }
         | labelspec id '(' Decls ')'     { AST.LabelEnvironment $2 $4 }
         | Type id                        { AST.Declaration $1 $2 }

Decls    :: { AST.Command }
         : Decls ';' Decl            { AST.Sequence $1 $3 }
         | Decl                      { $1 }

Type     :: { Type }
         : int                       { TInt }
         | double                    { TDouble }
         | char                      { TChar }
         | ref                       { TRef }
         | Type '(' Types ')'        { TFunction $1 $3 }
         | Type '(' ')'              { TFunction $1 Void }
         | Type '[' ']'              { TArray $1 }

Types    :: { Type }
         : Types ';' Type             { TypeSequence $1 $3 }
         | Type                      { $1 }

Bexpr   :: { AST.BoolExpression }
        : Bexpr or Bterm                { AST.LogOp Or $1 $3 }
        | Bterm                         { $1 }

Bterm   :: { AST.BoolExpression }
        : Bterm and Bfactor             { AST.LogOp And $1 $3 }
        | Bfactor                       { $1 }

Bfactor :: { AST.BoolExpression }
        : '(' Bexpr ')'                 { $2 }
        | not Bfactor                   { AST.Not $2 }
        | Expr relop Expr               { AST.Comparison $2 $1 $3 }
        | bool                          { AST.Boolean $1 }
        | eof                           { AST.Eof }
